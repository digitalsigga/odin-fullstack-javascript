Default Browser Styles and CSS Resets

Default Browser Styles:

Browsers apply default styles to all webpages using something called user-agent stylesheets.
These default styles include things like:
Larger, bolded text for <h1> elements.
Blue, underlined text for <a> (anchor) elements.
Automatic margins and padding on various elements.
Since each browser has its own user-agent stylesheet, the default styles can differ slightly between browsers.
Overriding Default Styles:

You can override the browser's default styles by writing your own CSS rules.
The CSS rules you write will take precedence over the user-agent styles, effectively overwriting the defaults.
CSS Resets:

CSS resets are stylesheets designed to remove or alter the default styles applied by browsers.
By using a CSS reset, developers can achieve consistency across different browsers and start with a clean slate for custom styling.
While commonly used, CSS resets are not mandatory. Some developers:
Choose to use prebuilt resets.
Create their own resets.
Opt not to use resets at all.


Reboot, Resets, and Reasoning in CSS
Introduction to CSS Resets:

CSS resets are used to handle styling inconsistencies across different browsers by removing or altering the default styles applied by user-agent stylesheets.
They provide a consistent baseline for styling, ensuring that browsers render elements in a uniform way.
Historical Context:

Tantek Çelik's undohtml.css (2004): One of the earliest resets, focused on stripping away default browser styles.
Meyer Reset: The most popular reset, introduced by Eric Meyer, removes default styling for a wide range of elements and has been widely adopted and updated over the years.
HTML5 Reset by Richard Clark: An evolution of the Meyer reset, adapted to accommodate HTML5 elements and features.
Evolution of CSS Resets:

Normalize.css: A significant shift in reset philosophy. Instead of removing all styles, Normalize.css selectively fixes inconsistencies across browsers while preserving useful default styles. It’s highly customizable and widely adopted in modern web development.
Sanitize.css: An opinionated reset that includes research-based best practices. It focuses on modern standards and includes specific choices for handling styling across browsers.
Reboot in Bootstrap:

Bootstrap 4 Reboot: Built upon Normalize.css, Reboot offers a more opinionated approach, incorporating element-specific styles as a part of Bootstrap. It provides a baseline for consistent styling within the Bootstrap framework, while additional styles are applied using classes.
Key Considerations for CSS Resets:

Scope of Reset: Does it apply to all elements or just a subset? How does it decide which elements and properties to touch?
Preserving Defaults: Does the reset aim to maintain some sensible browser defaults, or does it strip everything away?
Size and Performance: Considerations regarding the size of the reset and its impact on performance.
Tooling and Customization: Some resets, like Normalize, are designed to be customized and extended, often integrated with preprocessors or tools like PostCSS.
Modern CSS Resets:

MiniReset.css: A minimal reset that removes only the most problematic default styles while preserving useful defaults, like button and input layouts.
Vanilla CSS Un-Reset: An approach that re-styles elements after un-styling them with a reset, including opinionated defaults for typography and layout.
Opinionated Nature of Resets:

CSS resets vary widely in their approach and philosophy, reflecting the preferences and needs of their creators.
Developers should choose or tailor resets based on the specific requirements of their projects and the browsers they intend to support.
Reboot and Beyond:

Reboot: A component of Bootstrap, designed specifically for the framework’s ecosystem, blending Normalize’s consistency with Bootstrap’s opinionated styles.
Tailored Resets: With tools like Browserslist, resets can be tailored to target specific browsers and versions, optimizing for the supported environments.


Key Takeaways from "Making the Case for CSS Normalize and Reset Stylesheets in 2023" by Matt Brictson
Purpose of Normalize and Reset Stylesheets:

Normalize Stylesheets: They harmonize cross-browser inconsistencies while retaining most of the default styles, ensuring legibility and accessibility.
Reset Stylesheets: They remove all default styles, providing a blank canvas for developers, which can be beneficial but requires more work to re-style elements for legibility and usability.
Challenges with Default Browser Stylesheets:

Different browsers have slightly different default styles that can lead to inconsistencies in web development.
Some browser defaults, like the box-sizing: content-box model, can complicate layout and design work.
Modern Approaches:

Hybrid Approach: Many modern frameworks, like Tailwind CSS’s Preflight, combine normalize and reset stylesheets to get the benefits of both, creating a balanced foundation for CSS development.
Recommendation:

Matt Brictson recommends using modern-normalize for its well-tested, minimalistic approach that addresses browser inconsistencies while providing useful defaults.
A lightweight custom reset can be added to deal with the most problematic browser defaults, focusing on elements like margins for headings, paragraphs, and lists.
Example of a Lightweight Reset:

The author provides a minimal reset stylesheet that removes default margins, resets heading typography, and ensures responsive images, among other things.
Flexibility with Revert:

For cases where default browser styles might be desired, the revert keyword can be used to restore those styles selectively.
Conclusion:

Consider your project’s needs when choosing whether to use a CSS framework or start from scratch with a normalize and reset stylesheet.
Implementing a normalize stylesheet like modern-normalize early in a project is recommended to ensure consistency and accessibility across browsers.